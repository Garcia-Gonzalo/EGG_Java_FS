SubProceso mostrarMatrix(matric, m,n)
	definir i, j Como entero
	
	para i= 0 hasta m-1 Hacer
		para j=0 hasta n-1 Hacer
			escribir matric(i,j) ' ' Sin Saltar
		FinPara
		escribir ''
	FinPara
FinSubProceso

funcion valida<- validarData(input)
	// Valida que la cadena ingresada esté dentro del rango necesario
	definir valida Como Logico
	valida = Falso
	si Longitud(input) = 9 o Longitud(input) = 16 o Longitud(input)=1369 Entonces
		valida = Verdadero
	FinSi
FinFuncion

SubProceso  cargarMatriz(matriz, m, bases)
	// completa la matriz con la cadena
	definir i, j, max, long, index Como Entero
	long = Longitud(bases)
	index = 0
	para i=0 hasta m-1 Hacer
		para j=0 hasta m-1 Hacer
			matriz(i,j) = Subcadena(bases,index,index)
			index = index +1
		FinPara
	FinPara	
FinSubProceso

funcion valida <- validaMatriz(matriz, m)
	definir valida, primeraDiag, segundaDiag Como Logico
	definir i, j Como Entero
	definir base1, base2 Como Caracter
	
	
	primeraDiag = Verdadero
	base1 = matriz(0,0)
	i=1
	j=1
	mientras primeraDiag  y i <= m-1 Hacer
		si matriz(i,j) <> base1 Entonces
			primeraDiag =Falso
		FinSi
		i = i +1
		j = j+1
	FinMientras
	
	
	base2 = matriz(0,m-1)
	i=1
	j= m-2
	si primeraDiag Entonces
		segundaDiag = Verdadero
		mientras segundaDiag  y i <= m-1 Hacer
			si matriz(i,j) <> base2 Entonces
				segundaDiag =Falso
			FinSi
			i = i + 1
			j = j - 1
		FinMientras
	FinSi
	
	si primeraDiag y segundaDiag Entonces
		valida = Verdadero
	SiNo
		valida = falso
	FinSi
FinFuncion

Algoritmo pseinTevaluador
	definir matriz, frase Como Caracter
	definir long como entero
	
	//escribir "Ingrese las bases:"
	//leer frase
	
	//frase = 'CACBCACAC'
	//frase = 'BCAADCCBABCCBABB'
	
	//frase = 'CCADDBACCDDDDBDBCCABBAABDBCDCADDABABCDCDDABBBCABBABBDCADCCDABDDACDBBBDBDCCDDCABCAAAACDCDCCACDCDDADAADDACBDBCCDDBCBCBBAAADDAADCAABBBCBCCBCBDBCCBBCBABADAACDBDBADCBBACDADAADABBDBDBDBDCCDDCABCCCCCADBBBBCCDACCBBBDBDAADDBCCBCCBCBDDDDCCBAAACDDBBCAABAADABBBCCCCDCCBBDCDABCDACBCBACDBCCDABDBDCDCADCCBBADDBDCCADCCDCCACCDCDBCDBBADBAADBBCAADDABCAADADAABAACCBABDADADADDBCABDCCBBAADDDCDDCBADBCACCAAADCCDDABDBACBCAAADDBADBDACDDBDCBDCCCDDCACBCCCACCCCBACBAAAAACBCBCDAADCAACBCABDDABCBCBACCADABBBABBBBBAACADDDDBABACADAAABDDDCCDCACAACACADADBABACBABDBBADCDBBDACDCAABCADDBDBDCAABDCDABDDADDCDDBCBCDADCDBBDACABCDAABBCBADDDBCBADCABACDCABBCBCBCBCADBABBDBCCCADCADDCBABBDDDBBCBCDABACDDDABCCDBACCBDBADADDDAAACBDCDCCAACBDDCDCBADACDDDDBDCBAACDADBBDBDBCCACADBAABBAADAADDDACDDCDBDDBBDAADDAACCCACDBBBBBDCDCDDDABBCBAAADACADDCDCDCBCDCACAAABCADBDBBDDACCBBDABDDBCADCCCADDCDBACBBBDAADDCDAAADBBCDADBDBCBDDCAABCCDCCDCABCAACADADAACADDBBDABAABACDACDCDBBDDCCBCBCAAACBDBDBBBDBDBBCADCBACDCCBDACBBACBCADCDBACCADCDBDCDBBACBBCDCAAAAABCCDDCDDBBCBABCBCAABDBCCACBABDCABAACBDBDBCCCCADBBCDCCCAABADBACDDBADCDCAADDDCBDDBDCDCCCCCCCDBCDDBACBBCDACDADCACBDBBCCCDCCBCBCDACBDDDACCCAADBDBBDADDCCDDDBCDABCCBACCCCCBAACCBCABAAABBCABBCACCCABCDACBCDBDACACDDCACBCBBCCADABCBBDDABADDAAABACCBDCDABCBBBBACCDABAACDCACCCBBCDDACCDBCBCBAACBBBBADBCBCDABAAAABADAAAACDACADACDBBCCABADDDCACDCAACCDABBDBDAABADDBDCCCACDADBDDDCBBCBDCADCBCDAABDDDDBBBBCDDCC'

	//frase ='BCBBABBACBBBBCBB'
	
	//frase = 'CDDACCACCACAAABC'
	
	frase = 'ACCDBBADDDCCBACABDCBDCBADBDACBBBBDAABBCCBAACCABDBDCDDABDBDADAAACBBBBCDDDCBBBDDCDABBDDABDBDBBACADCDAAADACDDDACCDCACDDABACDCCCAABDDCCACDADDBCBAACCDBCBCDDDCAACCBAADCBBBCDCBBACBDCCDDADBABCAABBACABDCAACCBDADDCAAACCDBDBBCDDDDDACBCDDADDDDCBADADBDCADDABBCDAACBCCDDDADDADADAACCACDCDDABCCCADABBACDACCAADDBCBCCDADBCCADAAABDDDAABBABCADDCCAADDCDDCDCACBADADACADDAADCBDBCDBDDACDCBCDCCABBDCBACDDACCCDADBCADCACAAABBBCADDDDBCBACDBDAAADDDACCDACBBBADACCCDCACCBACDADBCBBDADACABAACBCCADDCCCCACCCCADBCCDAADCAABBABAADDBDADDABABCCABBCDDACCADAAADBBCCDBADCADCBBDADACCDDBCAAABBBDCAAAACBAADBABBABACDDBBCBDCDCADABABBDADCBADAACDBCBDABADBCBADCACADAABCDDCABACDDBDCBCBDCAAACBDABBCACBACCCBACACDCADBDCDCDDCAACDBDCBACDBBDAABDBBCBAAADBABDBAACAAACDCDAAABABDDDBCACADCBBAADCCDABCCCBBCACCBAABDAADDDCDACDDDBCDCCBABDABACCDCDCDABAABCABBADADCBDDACDDCDDCDACDADADCACBCDABABDDCCDBCCDABACDBDAABDBDDDBADDBACABDCDDBACDDBBDDBBACBCCAACABBDADDBCAACCBCCDADDBCAADDADCCCBAAABABBBBBCABAACADBCBBABACCABCDAABADCCCCDCCADDDCCABBDDDAAADDADACBBBCBDAADACABABBAACCCADADDABDBCADDDCCDBBCCBCDCDBDDDDCACDACDBBBDDBADDACADDADDABCACDCBBADDABBBDCBBDCDAABADDDDDBCACCCCAAACBCBCDBACCCDACCCDBCBDCBADBCDDACCDBDBDBCAAACDDCBAABDBCAADCADDBABABDCBCBCBBBCACBCADDCAAAAAACBBACBBCCACBDCDDDDADCAAACBABDDBDADBAADCBABDDBCDBABDBAADDDBACBBBCCCDBDDBDDAADBBADADDDCBCACBABCDBBABAADABCABCDBACBBBCDBADADDBDCBDABBDDDCDDCCACDCBDCADABAABCDCAACCDDBADBDBCDACAAACBCADCCCBAC'

	
	si validarData(frase) Entonces
		long = raiz(longitud(frase))
		dimension matriz(long, long)
		cargarMatriz(matriz, long, frase)
		mostrarMatrix(matriz, long, long)
		si validaMatriz(matriz, long) entonces
			escribir "La matriz es valida"
		SiNo
			Escribir  "La matriz no es valida"
		FinSi
	SiNo
		escribir "El tamaño de la muestra está por fuera del rango"
	FinSi
	
FinAlgoritmo
